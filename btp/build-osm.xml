<project name="btp-osm" default="osm-build" basedir=".">
  <!-- This file is imported by build.xml. -->

  <!-- directories -->
  <property name="osm.build.dir" value="${build.dir}/osm"/>
  <property name="osm.dl.dir" value="${dl.dir}/osm"/>

  <!-- result file -->
  <property name="build.bucharest.osm" value="${osm.build.dir}/bucharest.osm"/>

  <import file="build-osm-whole.xml"/>
  <import file="build-osm-parts.xml"/>
  <import file="build-osm-fixes.xml"/>

  <target name="osm-build" depends="osm-get-city,osm-fixes-merge"/>

  <target name="osm-get-city"
    description="get bucharest.osm depending on osm.sourceType">
    <!-- osm.sourceType for bucharest.osm from file build.properties:
         'whole' download whole country.osm.pbf then extract bucharest.osm
         'parts' download parts of bucharest from api.bucharest.org and merge
         'copy'  copy bucharest.osm from bucharest.prepared.osm -->

    <!-- default if osm.sourceType is not set:
         if bucharest.prepared.osm is set, then 'copy' else 'whole' -->
    <if>
      <not><isset property="osm.sourceType"/></not>
      <then>
        <if>
          <isset property="bucharest.prepared.osm"/>
          <then><property name="osm.sourceType" value="copy"/></then>
          <then><property name="osm.sourceType" value="whole"/></then>
        </if>
        <echo>osm.sourceType not set in build.properties, using '${osm.sourceType}'.</echo>
      </then>
    </if>
    <if>
      <equals arg1="${osm.sourceType}" arg2="copy" casesensitive="false"/>
      <then><antcall target="osm-copy"/></then>
      <elseif>
        <equals arg1="${osm.sourceType}" arg2="whole" casesensitive="false"/>
        <then><antcall target="osm-whole-extract-city"/></then>
      </elseif>
      <elseif>
        <equals arg1="${osm.sourceType}" arg2="parts" casesensitive="false"/>
        <then><antcall target="osm-parts-merge"/></then>
      </elseif>
      <else>
        <fail message="Not 'copy' or 'whole' or 'parts': ${osm.sourceType}"/>
      </else>
    </if>
  </target>

  <target name="osm-copy"
    description="Copy ${bucharest.prepared.osm} instead of downloads"
    depends="check-build.properties"
    if="bucharest.prepared.osm">
    <!-- bucharest.prepared.osm is optionally defined in build.properties -->

    <!-- copy so all targets read same version even if source changes. -->
    <copy file="${bucharest.prepared.osm}"
          tofile="${build.bucharest.osm}"/>
  </target>

  <target name="osm-clean"
    description="remove generated osm files (not downloaded files)">
    <delete dir="${osm.build.dir}" quiet="true"/>
  </target>

</project>